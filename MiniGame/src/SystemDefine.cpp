#include "SystemDefine.h"

const int SystemDefine::windowSizeX = 1280;	//ウィンドウサイズX
const int SystemDefine::windowSizeY = 720;	//ウィンドウサイズY

//画面外判定(引数に画像サイズを指定、画面外に出ていたらtrue)
bool SystemDefine::WindowOutBox(const Math::Box2D& hitBase)
{
	Math::Box2D windowBox(0, 0, windowSizeX, windowSizeY);
	return !windowBox.Hit(hitBase);
}

//画面内判定(引数に画像サイズを指定、画面内にいたらtrue)
bool SystemDefine::WindowInBox(const Math::Box2D& hitBase)
{
	Math::Box2D windowBox(0, 0, windowSizeX, windowSizeY);
	return windowBox.In(hitBase);
}

//生ポインタを安全にdeleteする
template<class T>void SystemDefine::SafeDelete(T& t)
{
	if (t != nullptr)
	{
		delete t;
		t = nullptr;
	}
}

//生ポインタを安全にdeleteする(配列版)
template<class T>void SystemDefine::SafeDeleteArr(T& t)
{
	if (t != nullptr)
	{
		delete[] t;
		t = nullptr;
	}
}

std::random_device SystemDefine::rd;
std::mt19937 SystemDefine::mtrand(rd());

//範囲内でランダムな値を指定個数分取得する
std::shared_ptr<int[]>  SystemDefine::OutputRandomRange(int lowerLimit, int upperLimit, int size)
{
	if (size <= 0) size = 1;

	std::shared_ptr<int[]> arr(new int[size] {});
	std::uniform_int_distribution<> randRange(lowerLimit, upperLimit);

	for (int i = 0; i < size; ++i)
	{
		arr[i] = randRange(mtrand);
	}

	return arr;
}